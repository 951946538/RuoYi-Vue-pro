package ${basePackage}.module.${table.moduleName}.service.${table.businessName};

import org.springframework.stereotype.Service;
import javax.annotation.Resource;
import org.springframework.validation.annotation.Validated;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import java.util.*;
import ${basePackage}.module.${table.moduleName}.controller.${sceneEnum.basePackage}.${table.businessName}.vo.*;
import ${basePackage}.module.${table.moduleName}.entity.${table.businessName}.${table.className};
import ${PageResultClassName};

import ${basePackage}.module.${table.moduleName}.mapper.${table.businessName}.${table.className}Mapper;
import ${basePackage}.module.${table.moduleName}.repository.${table.businessName}.${table.className}Repository;

import static ${ServiceExceptionUtilClassName}.exception;
import static ${basePackage}.module.${table.moduleName}.enums.ErrorCodeConstants.*;

/**
 * ${table.classComment} Service 实现类
 *
 */
@Service
@Validated
public class ${table.className}ServiceImpl implements ${table.className}Service {

    @Resource
    private ${table.className}Repository ${classNameVar}Repository;

    @Resource
    private ${table.className}Mapper ${classNameVar}Mapper;

    @Override
    public ${primaryColumn.javaType} create${simpleClassName}(${sceneEnum.prefixClass}${table.className}CreateReqVO createReqVO) {
        // 插入
        ${table.className} ${classNameVar} = ${classNameVar}Mapper.toEntity(createReqVO);
        ${classNameVar}Repository.save(${classNameVar});
        // 返回
        return ${classNameVar}.getId();
    }

    @Override
    public void update${simpleClassName}(${sceneEnum.prefixClass}${table.className}UpdateReqVO updateReqVO) {
        // 校验存在
        validate${simpleClassName}Exists(updateReqVO.getId());
        // 更新
        ${table.className} updateObj = ${classNameVar}Mapper.toEntity(updateReqVO);
        ${classNameVar}Repository.save(updateObj);
    }

    @Override
    public void delete${simpleClassName}(${primaryColumn.javaType} id) {
        // 校验存在
        validate${simpleClassName}Exists(id);
        // 删除
        ${classNameVar}Repository.deleteById(id);
    }

    private void validate${simpleClassName}Exists(${primaryColumn.javaType} id) {
        ${classNameVar}Repository.findById(id).orElseThrow(() -> exception(${simpleClassName_underlineCase.toUpperCase()}_NOT_EXISTS));
    }

    @Override
    public Optional<${table.className}> get${simpleClassName}(${primaryColumn.javaType} id) {
        return ${classNameVar}Repository.findById(id);
    }

    @Override
    public List<${table.className}> get${simpleClassName}List(Collection<${primaryColumn.javaType}> ids) {
        return StreamSupport.stream(${classNameVar}Repository.findAllById(ids).spliterator(), false)
                .collect(Collectors.toList());
    }

    @Override
    public PageResult<${table.className}> get${simpleClassName}Page(${sceneEnum.prefixClass}${table.className}PageReqVO pageReqVO, ${sceneEnum.prefixClass}${table.className}PageOrder orderV0) {
        // 创建 Sort 对象
        Sort sort = createSort(orderV0);

        // 创建 Pageable 对象
        Pageable pageable = PageRequest.of(pageReqVO.getPageNo() - 1, pageReqVO.getPageSize(), sort);

        // 创建 Specification
        Specification<${table.className}> spec = (root, query, cb) -> {
            List<Predicate> predicates = new ArrayList<>();

            #foreach ($column in $columns)
            #if (!${baseDOFields.contains(${column.javaField})} && !${column.primaryKey})##排除 BaseDO 的字段和主键
            #if (${column.listOperation})
            #if (${column.listOperationCondition} == "BETWEEN")
            if(pageReqVO.get${column.getJavaFieldCapitalize()}() != null) {
                predicates.add(cb.between(root.get("${column.javaField}"), pageReqVO.get${column.getJavaFieldCapitalize()}()[0], pageReqVO.get${column.getJavaFieldCapitalize()}()[1]));
            } #elseif(${column.listOperationCondition} == "LIKE")
            if(pageReqVO.get${column.getJavaFieldCapitalize()}() != null) {
                predicates.add(cb.like(root.get("${column.javaField}"), "%" + pageReqVO.get${column.getJavaFieldCapitalize()}() + "%"));
            }
            #else
            if(pageReqVO.get${column.getJavaFieldCapitalize()}() != null) {
                predicates.add(cb.equal(root.get("${column.javaField}"), pageReqVO.get${column.getJavaFieldCapitalize()}()));
            }
            #end

            #end
            #end
            #end

            return cb.and(predicates.toArray(new Predicate[0]));
        };

        // 执行查询
        Page<${table.className}> page = ${classNameVar}Repository.findAll(spec, pageable);

        // 转换为 PageResult 并返回
        return new PageResult<>(page.getContent(), page.getTotalElements());
    }

    @Override
    public List<${table.className}> get${simpleClassName}List(${sceneEnum.prefixClass}${table.className}ExportReqVO exportReqVO) {
        // 创建 Specification
        Specification<${table.className}> spec = (root, query, cb) -> {
            List<Predicate> predicates = new ArrayList<>();

            #foreach ($column in $columns)
            #if (!${baseDOFields.contains(${column.javaField})} && !${column.primaryKey})##排除 BaseDO 的字段和主键
            #if (${column.listOperation})
            #if (${column.listOperationCondition} == "BETWEEN")
            if(exportReqVO.get${column.getJavaFieldCapitalize()}() != null) {
                predicates.add(cb.between(root.get("${column.javaField}"), exportReqVO.get${column.getJavaFieldCapitalize()}()[0], exportReqVO.get${column.getJavaFieldCapitalize()}()[1]));
            } #elseif(${column.listOperationCondition} == "LIKE")
            if(exportReqVO.get${column.getJavaFieldCapitalize()}() != null) {
                predicates.add(cb.like(root.get("${column.javaField}"), "%" + exportReqVO.get${column.getJavaFieldCapitalize()}() + "%"));
            }
            #else
            if(exportReqVO.get${column.getJavaFieldCapitalize()}() != null) {
                predicates.add(cb.equal(root.get("${column.javaField}"), exportReqVO.get${column.getJavaFieldCapitalize()}()));
            }
            #end

            #end
            #end
            #end

            return cb.and(predicates.toArray(new Predicate[0]));
        };

        // 执行查询
        return ${classNameVar}Repository.findAll(spec);
    }

    private Sort createSort(${table.className}PageOrder order) {
        List<Sort.Order> orders = new ArrayList<>();

        // 根据 order 中的每个属性创建一个排序规则
        // 注意，这里假设 order 中的每个属性都是 String 类型，代表排序的方向（"asc" 或 "desc"）
        // 如果实际情况不同，你可能需要对这部分代码进行调整

        #foreach ($column in $columns)
        #if (!${baseDOFields.contains(${column.javaField})})##排除 BaseDO 的字段
        if (order.get${column.getJavaFieldCapitalize()}() != null) {
            orders.add(new Sort.Order(order.get${column.getJavaFieldCapitalize()}().equals("asc") ? Sort.Direction.ASC : Sort.Direction.DESC, "${column.javaField}"));
        }

        #end
        #end

        // 创建 Sort 对象
        return Sort.by(orders);
    }
}